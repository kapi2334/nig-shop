@page "/payment"
@using clientApp.Models
@using clientApp.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject OrderService OrderService
@inject UserService UserService
@inject AddressService AddressService
@inject InvoiceService InvoiceService

<div class="container mt-4">
    <h2>Payment Details</h2>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Credit Card Information</h5>
                    <EditForm Model="@cardDetails" OnValidSubmit="@HandlePayment">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="cardNumber" class="form-label">Card Number</label>
                            <InputText id="cardNumber" @bind-Value="cardDetails.CardNumber" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="cardHolder" class="form-label">Card Holder</label>
                            <InputText id="cardHolder" @bind-Value="cardDetails.CardHolder" class="form-control" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="expiryDate" class="form-label">Expiry Date (MM/YY)</label>
                                <InputText id="expiryDate" @bind-Value="cardDetails.ExpiryDate" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="cvv" class="form-label">CVV</label>
                                <InputText id="cvv" @bind-Value="cardDetails.CVV" class="form-control" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Back</button>
                            <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Processing...</span>
                                }
                                else
                                {
                                    <span>Pay</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Order Summary</h5>
                    @if (orderItems == null || !orderItems.Any())
                    {
                        <p>No items in order</p>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var item in orderItems)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-0">@item.Product.Name</h6>
                                            <small class="text-muted">Quantity: @item.Quantity</small>
                                        </div>
                                        <span>₪@item.TotalPrice</span>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-3">
                            <h5>Total: ₪@orderItems.Sum(item => item.TotalPrice)</h5>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .payment-header {
        margin-bottom: 30px;
    }

    .payment-details {
        max-width: 600px;
        margin: 0 auto;
    }

    .payment-actions {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .payment-btn, .cancel-btn {
        min-width: 150px;
    }

    .validation-message {
        color: red;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private CardDetails cardDetails = new();
    private List<OrderItem> orderItems = new();
    private bool isProcessing = false;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        orderItems = OrderService.GetCurrentOrder();
    }

    private ProductDto MapToProductDto(Product product)
    {
        return new ProductDto
        {
            id = product.Id,
            name = product.Name,
            type = product.Type,
            weight = product.Weight,
            price = product.Price,
            tax = product.Tax,
            dimensions = new DimensionsDto
            {
                length = product.Dimensions.Length,
                width = product.Dimensions.Width,
                height = product.Dimensions.Height
            },
            material = new MaterialDto
            {
                id = product.Material.Id,
                name = product.Material.Name
            },
            surfaceType = new SurfaceTypeDto
            {
                id = product.SurfaceType.Id,
                name = product.SurfaceType.Name
            }
        };
    }

    private async Task HandlePayment()
    {
        try
        {
            isProcessing = true;
            errorMessage = null;

            // Get current user
            var user = await UserService.GetCurrentUserAsync();
            if (user == null)
            {
                errorMessage = "User not found";
                return;
            }

            // Get active address
            var activeAddressId = await AddressService.GetActiveAddressId();
            if (activeAddressId == null)
            {
                errorMessage = "No active address selected";
                return;
            }

            // Create invoice
            var invoice = new InvoiceDto
            {
                clientId = user.id,
                paymentType = "card",
                addressId = activeAddressId.Value,
                products = orderItems.Select(item => new InvoiceProductDto
                {
                    productId = item.Product.Id,
                    amount = item.Quantity
                }).ToList()
            };

            // Send invoice
            var (success, invoiceId) = await InvoiceService.CreateInvoice(invoice);
            if (success && invoiceId.HasValue)
            {
                // Clear the order and navigate to success page
                OrderService.ClearOrder();
                NavigationManager.NavigateTo($"/order-success?invoiceId={invoiceId.Value}");
            }
            else
            {
                errorMessage = "Failed to process payment";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine($"[Error] Payment processing failed: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/order-summary");
    }

    public class CardDetails
    {
        public string CardNumber { get; set; } = string.Empty;
        public string CardHolder { get; set; } = string.Empty;
        public string ExpiryDate { get; set; } = string.Empty;
        public string CVV { get; set; } = string.Empty;
    }
} 