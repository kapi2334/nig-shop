@page "/payment"
@using clientApp.Models
@using clientApp.Services
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject OrderService OrderService

<div class="container">
    <div class="payment-header">
        <h1 class="text-center">Payment</h1>
    </div>

    <div class="payment-details">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Order Summary</h5>
                <p class="card-text">
                    <strong>Total Products:</strong> @GetTotalProducts()<br />
                    <strong>Total Amount:</strong> ₪@GetTotalAmount()<br />
                    <strong>Delivery:</strong> @(includeDelivery ? "Yes (+₪20)" : "No")<br />
                </p>
            </div>
        </div>

        <EditForm Model="@paymentModel" OnValidSubmit="ProcessPayment" class="mock-payment-form mt-4">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="cardNumber">Card Number</label>
                <InputText @bind-Value="paymentModel.CardNumber" class="form-control" id="cardNumber" />
                <ValidationMessage For="@(() => paymentModel.CardNumber)" />
            </div>
            <div class="form-group mb-3">
                <label for="cardHolder">Card Holder</label>
                <InputText @bind-Value="paymentModel.CardHolder" class="form-control" id="cardHolder" />
                <ValidationMessage For="@(() => paymentModel.CardHolder)" />
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="expiry">Expiry Date (MM/YY)</label>
                    <InputText @bind-Value="paymentModel.ExpiryDate" class="form-control" id="expiry" />
                    <ValidationMessage For="@(() => paymentModel.ExpiryDate)" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="cvv">CVV</label>
                    <InputText @bind-Value="paymentModel.CVV" class="form-control" id="cvv" />
                    <ValidationMessage For="@(() => paymentModel.CVV)" />
                </div>
            </div>

            <div class="payment-actions mt-4">
                <button type="submit" class="btn btn-success payment-btn">Pay ₪@GetTotalAmount()</button>
                <button type="button" class="btn btn-secondary cancel-btn" @onclick="CancelPayment">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .payment-header {
        margin-bottom: 30px;
    }

    .payment-details {
        max-width: 600px;
        margin: 0 auto;
    }

    .payment-actions {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .payment-btn, .cancel-btn {
        min-width: 150px;
    }

    .validation-message {
        color: red;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }
</style>

@code {
    private List<OrderItem> orderItems = new();
    private bool includeDelivery = false;
    private PaymentModel paymentModel = new();

    protected override void OnInitialized()
    {
        orderItems = OrderService.GetCurrentOrder();
        includeDelivery = OrderService.GetDeliveryOption();
        
        // Set default values
        paymentModel.CardNumber = "4111 1111 1111 1111";
        paymentModel.CardHolder = "John Doe";
        paymentModel.ExpiryDate = "12/25";
        paymentModel.CVV = "123";
    }

    private int GetTotalProducts()
    {
        return orderItems.Sum(item => item.Quantity);
    }

    private decimal GetTotalAmount()
    {
        decimal baseAmount = orderItems.Sum(item => item.Product.Price * item.Quantity);
        return includeDelivery ? baseAmount + 20 : baseAmount;
    }

    private async Task ProcessPayment()
    {
        // Mock successful payment
        await Task.Delay(1000); // Simulate processing
        OrderService.ClearOrder(); // Clear the order after successful payment
        NavigationManager.NavigateTo("/order-confirmation");
    }

    private void CancelPayment()
    {
        NavigationManager.NavigateTo("/order-summary");
    }

    public class PaymentModel
    {
        [Required(ErrorMessage = "Card number is required")]
        [RegularExpression(@"^\d{4}\s\d{4}\s\d{4}\s\d{4}$", ErrorMessage = "Invalid card number format")]
        public string CardNumber { get; set; }

        [Required(ErrorMessage = "Card holder name is required")]
        [MinLength(3, ErrorMessage = "Card holder name must be at least 3 characters")]
        public string CardHolder { get; set; }

        [Required(ErrorMessage = "Expiry date is required")]
        [RegularExpression(@"^(0[1-9]|1[0-2])\/([0-9]{2})$", ErrorMessage = "Invalid expiry date format (MM/YY)")]
        public string ExpiryDate { get; set; }

        [Required(ErrorMessage = "CVV is required")]
        [RegularExpression(@"^\d{3}$", ErrorMessage = "CVV must be 3 digits")]
        public string CVV { get; set; }
    }
} 