@page "/address-manager"
@using clientApp.Models
@using clientApp.Services
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject AddressService AddressService

<div class="container mt-4">
    <div class="row">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Address Manager</h2>
                <div>
                    <button class="btn btn-secondary me-2" @onclick="NavigateBack">Back</button>
                    <button class="btn btn-primary" @onclick="NavigateToAddAddress">Add New Address</button>
                </div>
            </div>

            @if (addresses == null)
            {
                <p>Loading addresses...</p>
            }
            else if (!addresses.Any())
            {
                <p>No addresses found. Add a new address to get started.</p>
            }
            else
            {
                <div class="list-group">
                    @foreach (var address in addresses)
                    {
                        <div class="list-group-item list-group-item-action @(activeAddressId == address.id ? "active" : "")"
                             @onclick="() => SetActiveAddress(address.id)">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-1">@address.street @address.buildingNo @(!string.IsNullOrEmpty(address.localeNo?.ToString()) ? $"/" + address.localeNo : "")</h5>
                                    <p class="mb-1">@address.postCode @address.city</p>
                                    <small>@address.country</small>
                                </div>
                                <div class="d-flex align-items-center">
                                    @if (activeAddressId == address.id)
                                    {
                                        <span class="badge bg-success me-2">Active</span>
                                    }
                                    <button class="btn btn-danger btn-sm" @onclick:stopPropagation="true" @onclick="async () => await DeleteAddress(address.id)">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<AddressDto>? addresses;
    private int? activeAddressId;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetCurrentUserAsync();
        if (user?.Addresses != null)
        {
            addresses = user.Addresses.ToList();
        }

        activeAddressId = await AddressService.GetActiveAddressId();
        
        // If no active address is set and there are addresses available, set the first one as active
        if (activeAddressId == null && addresses != null && addresses.Any())
        {
            await SetActiveAddress(addresses.First().id);
        }
    }

    private async Task SetActiveAddress(int addressId)
    {
        activeAddressId = addressId;
        await AddressService.SetActiveAddressId(addressId);
        StateHasChanged();
    }

    private async Task DeleteAddress(int addressId)
    {
        if (await UserService.RemoveAddress(addressId))
        {
            // If we're deleting the active address, clear it
            if (activeAddressId == addressId)
            {
                await AddressService.ClearActiveAddress();
                activeAddressId = null;
            }

            // Refresh the address list
            var user = await UserService.GetCurrentUserAsync();
            if (user?.Addresses != null)
            {
                addresses = user.Addresses.ToList();
                
                // If we have addresses and no active address is set, set the first one as active
                if (activeAddressId == null && addresses.Any())
                {
                    await SetActiveAddress(addresses.First().id);
                }
            }
            else
            {
                addresses = new List<AddressDto>();
            }
            StateHasChanged();
        }
    }

    private void NavigateToAddAddress()
    {
        NavigationManager.NavigateTo("/address/add");
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
} 