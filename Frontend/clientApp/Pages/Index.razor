@page "/"
@using clientApp.Models
@using clientApp.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject ProductService ProductService
@inject OrderService OrderService
@inject ILogger<Index> Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService

<div class="container-fluid">
    <div class="row" style="height: 100vh;">
        <!-- Left Panel - Product List -->
        <div class="col-2 border-end p-3" style="height: 100%; overflow-y: auto;">
            <h3>Products</h3>
            @if (error != null)
            {
                <div class="alert alert-danger">
                    Error loading products: @error
                </div>
            }
            else if (products == null)
            {
                <p>Loading products...</p>
            }
            else if (!products.Any())
            {
                <p>No products available.</p>
            }
            else
            {
                <div class="list-group">
                    @foreach (var product in products)
                    {
                        <button class="list-group-item list-group-item-action @(selectedProduct?.Id == product.Id ? "active" : "")"
                                @onclick="() => SelectProduct(product)">
                            @product.Name
                        </button>
                    }
                </div>
            }
        </div>

        <!-- Center Panel - Product Details -->
        <div class="col-8 border-end p-3" style="height: 100%; overflow-y: auto;">
            <h3>Product Details</h3>
            @if (selectedProduct != null)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@selectedProduct.Name</h5>
                        <p class="card-text">
                            <strong>ID:</strong> @selectedProduct.Id<br />
                            <strong>Type:</strong> @selectedProduct.Type<br />
                            <strong>Weight:</strong> @selectedProduct.Weight kg<br />
                            <strong>Price:</strong> ₪@selectedProduct.Price<br />
                            <strong>Tax:</strong> @selectedProduct.Tax%<br />
                        </p>
                        <h6>Dimensions:</h6>
                        <p>
                            Length: @selectedProduct.Dimensions.Length<br />
                            Width: @selectedProduct.Dimensions.Width<br />
                            Height: @selectedProduct.Dimensions.Height
                        </p>
                        <p>
                            <strong>Material:</strong> @selectedProduct.Material.Name<br />
                            <strong>Surface Type:</strong> @selectedProduct.SurfaceType.Name
                        </p>
                        <button class="btn btn-primary" @onclick="() => AddToOrder(selectedProduct)">
                            Add to Order
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Right Panel - Order List -->
        <div class="col-2 p-3" style="height: 100%; position: relative;">
            <div style="height: calc(100% - 50px); overflow-y: auto;">
                @if (currentUser == null)
                {
                    <button class="btn btn-outline-primary w-100 mb-3" @onclick="NavigateToLogin">Log in</button>
                }
                else
                {
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <a href="/address-manager" class="text-primary text-decoration-none" style="cursor: pointer;">
                            <span class="text-primary">Welcome, @currentUser.name!</span>
                        </a>
                        <button class="btn btn-outline-danger btn-sm" @onclick="Logout">Logout</button>
                    </div>
                }
                <h3>Current Order</h3>
                @if (!orderItems.Any())
                {
                    <p>No products in order</p>
                }
                else
                {
                    <div class="list-group">
                        @foreach (var item in orderItems)
                        {
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <span>@item.Product.Name</span>
                                        <small class="text-muted ms-2">x @item.Quantity</small>
                                    </div>
                                    <div>
                                        <span class="me-2">₪@item.TotalPrice</span>
                                        <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromOrder(item)">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="mt-3">
                        <h5>Total: ₪@orderItems.Sum(item => item.TotalPrice)</h5>
                    </div>
                }
            </div>
            <div style="position: absolute; bottom: 1rem; right: 1rem; width: calc(100% - 2rem);">
                <button class="btn btn-success w-100" @onclick="NavigateToOrderSummary">Zamuf</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product>? products;
    private Product? selectedProduct;
    private List<OrderItem> orderItems = new();
    private string? error;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Initializing Index page");
            products = await ProductService.GetProductsAsync();
            Logger.LogInformation($"Loaded {products?.Count ?? 0} products");
            
            // Get current user
            currentUser = await UserService.GetCurrentUserAsync();
            
            // Get current order
            orderItems = OrderService.GetCurrentOrder();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            error = ex.Message;
        }
    }

    private void SelectProduct(Product product)
    {
        selectedProduct = product;
    }

    private void AddToOrder(Product product)
    {
        var existingItem = orderItems.FirstOrDefault(item => item.Product.Id == product.Id);
        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            orderItems.Add(new OrderItem(product));
        }
    }

    private void RemoveFromOrder(OrderItem item)
    {
        item.Quantity--;
        if (item.Quantity < 1)
        {
            orderItems.Remove(item);
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToOrderSummary()
    {
        OrderService.SetCurrentOrder(orderItems);
        NavigationManager.NavigateTo("/order-summary");
    }

    private async Task Logout()
    {
        await UserService.LogoutAsync();
        currentUser = null;
        NavigationManager.NavigateTo("/", true);
    }
} 