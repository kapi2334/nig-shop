@page "/signup"
@using clientApp.Services
@using clientApp.Models
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="signup-container">
    <div class="back-button" @onclick="NavigateBack">
        <span class="arrow">‚Üê</span>
    </div>

    <div class="signup-form">
        <h1>SIGN UP</h1>
        
        <div class="form-group">
            <label for="login">Login</label>
            <input type="text" id="login" @bind="login" class="form-control" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" @bind="password" class="form-control" />
        </div>

        <div class="form-row">
            <div class="form-group half-width">
                <label for="name">Name</label>
                <input type="text" id="name" @bind="name" class="form-control" />
            </div>
            <div class="form-group half-width">
                <label for="surname">Surname</label>
                <input type="text" id="surname" @bind="surname" class="form-control" />
            </div>
        </div>

        <div class="form-group">
            <div class="company-checkbox">
                <input type="checkbox" id="isCompany" @bind="isCompany" />
                <label for="isCompany">Is company?</label>
            </div>
            @if (isCompany)
            {
                <label for="nip">NIP</label>
                <input type="text" id="nip" @bind="nip" class="form-control" />
                @if (!string.IsNullOrWhiteSpace(nipError))
                {
                    <div class="field-error">@nipError</div>
                }
            }
        </div>

        <button class="signup-button" @onclick="HandleSignUp" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner"></span>
                <span>SIGNING UP...</span>
            }
            else
            {
                <span>SIGN UP</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
</div>

<style>
    .signup-container {
        max-width: 500px;
        margin: 2rem auto;
        padding: 20px;
        position: relative;
    }

    .back-button {
        position: absolute;
        left: 0;
        top: 0;
        cursor: pointer;
        font-size: 24px;
        color: #000;
    }

    .arrow {
        font-size: 24px;
        line-height: 1;
    }

    .signup-form {
        margin-top: 20px;
    }

    h1 {
        text-align: center;
        margin-bottom: 30px;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .half-width {
        flex: 1;
        margin-bottom: 0;
    }

    label {
        display: block;
        margin-bottom: 5px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .company-checkbox {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
    }

    .company-checkbox input[type="checkbox"] {
        margin: 0;
    }

    .signup-button {
        width: 100%;
        padding: 12px;
        background-color: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .signup-button:disabled {
        background-color: #95e3b6;
        cursor: not-allowed;
    }

    .signup-button:not(:disabled):hover {
        background-color: #27ae60;
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-top: 20px;
    }

    .alert-danger {
        background-color: #fee;
        color: #c00;
        border: 1px solid #fcc;
    }

    .field-error {
        color: #c00;
        font-size: 0.875rem;
        margin-top: 4px;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top-color: #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private string login = "";
    private string password = "";
    private string name = "";
    private string surname = "";
    private string nip = "";
    private string nipError = "";
    private bool isCompany = false;
    private string errorMessage = "";
    private bool isLoading = false;

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/login");
    }

    private bool ValidateNip()
    {
        if (!isCompany)
        {
            return true;
        }

        if (string.IsNullOrWhiteSpace(nip))
        {
            nipError = "NIP is required for company accounts.";
            return false;
        }

        // Basic NIP validation - should be 10 digits
        if (!System.Text.RegularExpressions.Regex.IsMatch(nip, @"^\d{10}$"))
        {
            nipError = "NIP must be exactly 10 digits.";
            return false;
        }

        nipError = "";
        return true;
    }

    private async Task HandleSignUp()
    {
        try
        {
            errorMessage = "";
            nipError = "";

            if (string.IsNullOrWhiteSpace(login) || string.IsNullOrWhiteSpace(password))
            {
                errorMessage = "Login and password are required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(surname))
            {
                errorMessage = "Name and surname are required.";
                return;
            }

            if (!ValidateNip())
            {
                return;
            }

            isLoading = true;
            string? nipValue = isCompany && !string.IsNullOrWhiteSpace(nip) ? nip : null;
            var result = await UserService.SignUpAsync(
                login, 
                password, 
                name, 
                surname, 
                nipValue, 
                isCompany
            );

            if (result.Success)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
} 