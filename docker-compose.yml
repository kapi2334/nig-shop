
services:
  ############################UI Containers############################
  user-app:
    build:
      context: ./Frontend/clientApp
      dockerfile: Dockerfile
    container_name: clientApp 
    environment:
      - ASPNETCORE_URLS=http://+:5010
    ports:
      - "4000:5010" 
    networks:
      - ui 
  admin-app:
    build:
      context: ./Frontend/adminApp
      dockerfile: Dockerfile
    container_name: adminApp 
    environment:
      - ASPNETCORE_URLS=http://+:5011
    ports:
      - "4001:5011" 
    networks:
      - ui 


  ############################API Services############################
  user-service:
    build:
      context: ./userService
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - ASPNETCORE_URLS=http://+:5001
    ports:
      - "3001:5001" 
    networks:
      - db
      - backend
    depends_on:
      - user-service-db 
      
  product-service:
    build:
      context: ./productService
      dockerfile: Dockerfile
    container_name: product_service
    environment:
      - ASPNETCORE_URLS=http://+:5005
    ports:
      - "3000:5005" 
    networks:
      - db
      - backend
  payment-service:
    build:
      context: ./paymentService
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      - ASPNETCORE_URLS=http://+:5004
    ports:
      - "3004:5004" 
    networks:
      - backend
      - db
  order-service:
    build:
      context: ./orderService
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - ASPNETCORE_URLS=http://+:5003
    ports:
      - "3003:5003" 
    networks:
      - backend
      - db
  invoice-service:
    build:
      context: ./invoiceService
      dockerfile: Dockerfile
    container_name: invoice_service
    environment:
      - ASPNETCORE_URLS=http://+:5002
    ports:
      - "3002:5002" 
    networks:
      - backend
      - db
###############################nginx########################################
  nginx:
    build:
      context: /nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    networks:
      - ui
###############################Databases#####################################
  user-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: userservice
    volumes:
      - userservice_data:/var/lib/postgresql/data
      - .db/init.sql:/docker-entrypoint.d/init.sql
    ports:
      - "5431:5432"
    networks:
      - db
  product-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: productservice
    ports:
      - "5432:5432"
    volumes:
      - productservice_data:/var/lib/postgresql/data
      - .db/init.sql:/docker-entrypoint.d/init.sql
    networks:
      - db
    
  invoice-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: invoiceservice 
    ports:
      - "5433:5432"
    volumes:
      - invoiceservice_data:/var/lib/postgresql/data
      - .db/init.sql:/docker-entrypoint.d/init.sql
    networks:
      - db
  
  order-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: orderservice 
    ports:
      - "5434:5432"
    volumes:
      - orderservice_data:/var/lib/postgresql/data
      - .db/init.sql:/docker-entrypoint.d/init.sql
    networks:
      - db     
      
###############################Networks definitions##########################
networks:
  backend:
    driver: bridge
  ui:
    driver: bridge
  db:
    driver: bridge
volumes:
  userservice_data:
  productservice_data:
  invoiceservice_data:
  orderservice_data:

