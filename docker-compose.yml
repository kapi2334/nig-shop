services:
  ############################UI Containers############################
  user-app:
    build:
      context: ./Frontend/clientApp
      dockerfile: Dockerfile
    container_name: clientApp
    ports:
      - "4000:80"
    networks:
      - ui
      - backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - product-service
      - nginx

  admin-app:
    build:
      context: ./Frontend/adminApp
      dockerfile: Dockerfile
    container_name: adminApp 
    environment:
      - ASPNETCORE_URLS=http://+:5011
    ports:
      - "4001:5011" 
    networks:
      - ui 

  ############################API Services############################
  user-service:
    build:
      context: ./userService
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - ASPNETCORE_URLS=http://+:5001
    ports:
      - "3001:5001" 
    networks:
      - ui
      - db
      - backend
    depends_on:
      - user-service-db
      - database-init

  product-service:
    build:
      context: ./productService
      dockerfile: Dockerfile
    container_name: product_service
    environment:
      - ASPNETCORE_URLS=http://+:5005
      - ASPNETCORE_ENVIRONMENT=Development
      - CORS_ORIGINS=http://localhost:4000
    ports:
      - "3000:5005" 
    networks:
      - ui
      - db
      - backend
    depends_on:
      - product-service-db
      - database-init

  payment-service:
    build:
      context: ./paymentService
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      - ASPNETCORE_URLS=http://+:5004
    ports:
      - "3004:5004" 
    networks:
      - ui
      - db
      - backend

  order-service:
    build:
      context: ./orderService
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - ASPNETCORE_URLS=http://+:5003
    ports:
      - "3003:5003" 
    networks:
      - ui
      - backend
      - db
    depends_on:
      - order-service-db
      - database-init

  invoice-service:
    build:
      context: ./invoiceService
      dockerfile: Dockerfile
    container_name: invoice_service
    environment:
      - ASPNETCORE_URLS=http://+:5002
    ports:
      - "3002:5002" 
    networks:
      - ui
      - backend
      - db
    depends_on:
      - invoice-service-db
      - database-init

  ###############################nginx########################################
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - ui
      - backend
    depends_on:
      - product-service

  ###############################Databases#####################################
  database-init:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
    networks:
      - db
    depends_on:
      - user-service-db
      - product-service-db
      - invoice-service-db
      - order-service-db
    command: >
      bash -c '
        echo "Starting database initialization..."
        
        max_attempts=5
        attempt=1
        
        for db in user-service-db product-service-db invoice-service-db order-service-db; do
          echo "Checking connection to $$db..."
          while ! PGPASSWORD=Rybenka!Dorsze47 psql -h $$db -U postgres -d postgres -c "SELECT 1;" > /dev/null 2>&1; do
            echo "Attempt $$attempt/$$max_attempts: Waiting for $$db to be ready..."
            sleep 2
            attempt=$$((attempt + 1))
            if [ $$attempt -gt $$max_attempts ]; then
              echo "Error: Timeout waiting for $$db after $$max_attempts attempts"
              exit 1
            fi
          done
          echo "$$db is ready!"
          attempt=1
        done

        echo "All databases are ready. Creating databases if they dont exist..."
        
        for db_host in user-service-db product-service-db invoice-service-db order-service-db; do
          db_name=$${db_host%-db}service
          echo "Creating database $$db_name on host $$db_host if it doesnt exist..."
          PGPASSWORD=Rybenka!Dorsze47 psql -h $$db_host -U postgres -d postgres -c "CREATE DATABASE $$db_name;" && \
            echo "Successfully created database $$db_name" || \
            echo "Note: Database $$db_name already exists"
        done
        
        echo "Database initialization completed successfully!"
        exit 0
      '

  user-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: userservice
    volumes:
      - userservice_data:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    networks:
      - db

  product-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: productservice
    ports:
      - "5432:5432"
    volumes:
      - productservice_data:/var/lib/postgresql/data
    networks:
      - db
    
  invoice-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: invoiceservice 
    ports:
      - "5433:5432"
    volumes:
      - invoiceservice_data:/var/lib/postgresql/data
    networks:
      - db
  
  order-service-db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Rybenka!Dorsze47
      POSTGRES_DB: orderservice 
    ports:
      - "5434:5432"
    volumes:
      - orderservice_data:/var/lib/postgresql/data
    networks:
      - db
      
###############################Networks definitions##########################
networks:
  backend:
    driver: bridge
  ui:
    driver: bridge
  db:
    driver: bridge

volumes:
  userservice_data:
  productservice_data:
  invoiceservice_data:
  orderservice_data:
