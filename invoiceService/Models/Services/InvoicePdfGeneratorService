using PdfSharpCore.Pdf;
using PdfSharpCore.Drawing;
using System;
using System.IO;
using System.Linq;
using System.Globalization;
namespace InvoiceService.Models.Services{
	internal class InvoicePdfGeneratorService{
		public MemoryStream Generate(Invoice invoice){
			var document = new PdfDocument();
			var page = document.AddPage();
			var gfx = XGraphics.FromPdfPage(page);
			var font = new XFont("Verdana", 10, XFontStyle.Regular);
			var boldFont = new XFont("Verdana", 10, XFontStyle.Bold);
			double y = 40;

			// Invoice title
			gfx.DrawString("Faktura VAT", new XFont("Verdana", 16, XFontStyle.Bold), XBrushes.Black, new XRect(0, y, page.Width, 30), XStringFormats.TopCenter);
			y += 40;

			// Dane sprzedawcy
			gfx.DrawString("Sprzedawca:", boldFont, XBrushes.Black, 40, y);
			y += 15;
			gfx.DrawString($"{invoice.issuer.name}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"{invoice.issuer.street} {invoice.issuer.houseNumber}/{invoice.issuer.apartmentNumber}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"{invoice.issuer.postalCode} {invoice.issuer.city}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"{invoice.issuer.country}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"NIP: {invoice.issuer.nip}", font, XBrushes.Black, 40, y);

			// Dane nabywcy
			y = 100;
			gfx.DrawString("Nabywca:", boldFont, XBrushes.Black, 300, y);
			y += 15;
			gfx.DrawString($"{invoice.clientName}", font, XBrushes.Black, 300, y);
			y += 12;
			gfx.DrawString($"{invoice.clientStreet} {invoice.clientHouseNumber}/{invoice.clientApartmentNumber}", font, XBrushes.Black, 300, y);
			y += 12;
			gfx.DrawString($"{invoice.clientPostalCode} {invoice.clientCity}", font, XBrushes.Black, 300, y);
			y += 12;
			gfx.DrawString($"{invoice.clientCountry}", font, XBrushes.Black, 300, y);
			y += 12;
			if (invoice.clientNIP.HasValue)
				gfx.DrawString($"NIP: {invoice.clientNIP}", font, XBrushes.Black, 300, y);

			// Dane ogólne
			y += 30;
			gfx.DrawString($"Data wystawienia: {invoice.issueDate:yyyy-MM-dd}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"Termin płatności: {invoice.paymentDeadline:yyyy-MM-dd}", font, XBrushes.Black, 40, y);
			y += 12;
			gfx.DrawString($"Rodzaj płatności: {invoice.paymentType}", font, XBrushes.Black, 40, y);

			// Tabela produktów
			y += 30;
			gfx.DrawString("Lp.", boldFont, XBrushes.Black, 40, y);
			gfx.DrawString("Ilość", boldFont, XBrushes.Black, 80, y);
			gfx.DrawString("Netto", boldFont, XBrushes.Black, 130, y);
			gfx.DrawString("VAT %", boldFont, XBrushes.Black, 200, y);
			gfx.DrawString("Kw. VAT", boldFont, XBrushes.Black, 250, y);
			gfx.DrawString("Brutto", boldFont, XBrushes.Black, 330, y);
			gfx.DrawString("Razem", boldFont, XBrushes.Black, 400, y);
			y += 15;

			int index = 1;
			foreach (var product in invoice.products){
				gfx.DrawString(index.ToString(), font, XBrushes.Black, 40, y);
				gfx.DrawString(product.quantity, font, XBrushes.Black, 80, y);
				gfx.DrawString(product.net.ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 130, y);
				gfx.DrawString($"{product.tax}%", font, XBrushes.Black, 200, y);
				gfx.DrawString(product.taxAmount.ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 250, y);
				gfx.DrawString(product.gross.ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 330, y);
				gfx.DrawString(product.totalPrice.ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 400, y);
				y += 12;
				index++;
			}

			// Podsumowanie
			y += 20;
			gfx.DrawLine(XPens.Black, 40, y, 500, y);
			y += 10;
			gfx.DrawString("Suma netto:", boldFont, XBrushes.Black, 300, y);
			gfx.DrawString(invoice.products.Sum(p => p.net).ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 400, y);
			y += 12;
			gfx.DrawString("Suma VAT:", boldFont, XBrushes.Black, 300, y);
			gfx.DrawString(invoice.products.Sum(p => p.taxAmount).ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 400, y);
			y += 12;
			gfx.DrawString("Suma brutto:", boldFont, XBrushes.Black, 300, y);
			gfx.DrawString(invoice.products.Sum(p => p.totalPrice).ToString("F2", CultureInfo.InvariantCulture), font, XBrushes.Black, 400, y);

			// Zwrócenie strumienia
			var stream = new MemoryStream();
			document.Save(stream, false); // false - nie zamykaj strumienia
			stream.Position = 0;
			return stream;
		}
	}
}