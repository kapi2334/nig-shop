// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserService.Data;

#nullable disable

namespace userService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserService.Models.Abstract.UserType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("nip")
                        .HasColumnType("bigint");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("UserService.Models.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("buildingNo")
                        .HasColumnType("integer")
                        .HasColumnName("nrdomu");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("miasto");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kraj");

                    b.Property<int?>("localeNo")
                        .HasColumnType("integer")
                        .HasColumnName("nrmieszkania");

                    b.Property<string>("postCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("kodpocztowy");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ulica");

                    b.HasKey("id");

                    b.ToTable("adres");
                });

            modelBuilder.Entity("UserService.Models.ClientEntity", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer")
                        .HasColumnName("osoba_id");

                    b.Property<int>("addressId")
                        .HasColumnType("integer")
                        .HasColumnName("adres_id");

                    b.Property<int>("AdresId")
                        .HasColumnType("integer");

                    b.Property<int>("OsobaId")
                        .HasColumnType("integer");

                    b.HasKey("id", "addressId");

                    b.HasIndex("OsobaId");

                    b.HasIndex("addressId");

                    b.ToTable("osobafizycznaadres");
                });

            modelBuilder.Entity("UserService.Models.CompanyEntity", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer")
                        .HasColumnName("firma_id");

                    b.Property<int>("addressId")
                        .HasColumnType("integer")
                        .HasColumnName("adres_id");

                    b.Property<int>("AdresId")
                        .HasColumnType("integer");

                    b.Property<int>("FirmaId")
                        .HasColumnType("integer");

                    b.HasKey("id", "addressId");

                    b.HasIndex("addressId");

                    b.ToTable("firmaadres");
                });

            modelBuilder.Entity("UserService.Models.Client", b =>
                {
                    b.HasBaseType("UserService.Models.Abstract.UserType");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imie");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwisko");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("UserService.Models.Company", b =>
                {
                    b.HasBaseType("UserService.Models.Abstract.UserType");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nazwa");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("UserService.Models.ClientEntity", b =>
                {
                    b.HasOne("UserService.Models.Abstract.UserType", "user")
                        .WithMany()
                        .HasForeignKey("OsobaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Models.Address", "address")
                        .WithMany("clientsEntities")
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("user");
                });

            modelBuilder.Entity("UserService.Models.CompanyEntity", b =>
                {
                    b.HasOne("UserService.Models.Address", "address")
                        .WithMany("companiesEntities")
                        .HasForeignKey("addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserService.Models.Abstract.UserType", "user")
                        .WithMany("address")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("user");
                });

            modelBuilder.Entity("UserService.Models.Client", b =>
                {
                    b.HasOne("UserService.Models.Abstract.UserType", null)
                        .WithOne()
                        .HasForeignKey("UserService.Models.Client", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserService.Models.Company", b =>
                {
                    b.HasOne("UserService.Models.Abstract.UserType", null)
                        .WithOne()
                        .HasForeignKey("UserService.Models.Company", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserService.Models.Abstract.UserType", b =>
                {
                    b.Navigation("address");
                });

            modelBuilder.Entity("UserService.Models.Address", b =>
                {
                    b.Navigation("clientsEntities");

                    b.Navigation("companiesEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
